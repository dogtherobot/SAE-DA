from __future__ import print_function
import pandas as pd  
import os
import matplotlib.pyplot as plt
import numpy as np
from scipy.integrate import cumtrapz
from google.oauth2 import service_account
from googleapiclient.discovery import build
import json
from scipy.integrate import simpson
from openpyxl import load_workbook
import itertools


EGroups_raw = {}
folder_path = r'C:\Users\cntur\Downloads\Endurance csv groups'
files = os.listdir(folder_path)
i = 353
ratio_d = {'E':['P*t']}
units_d = {'T':'[C]','t':'[s]'}
masses = {'224e':10.88*453.59237,'225e':9.51*453.59237,'3p e':10**4*3,'cell':126}
R=3.5 * 10**-3 #ohm
c = 1.4 #J/(g*C)
point_weight_dict1 = {
    'Mass Ratio': 5,
    'Capacity Ratio':3,
    #'Temp Diff Ratio': 3,
    'Nominal Pack Voltage Ratio':5,
    'Volume Ratio':5,
    'Max C Rate Ratio':4
}
keys = list(point_weight_dict1.keys())
points_range = range(6)
combinations = list(itertools.product(points_range, repeat=len(keys)))

# Create dictionaries with the combinations and append them to a list
dict_list = []
for combo in combinations:
    new_dict = {keys[i]: combo[i] for i in range(len(keys))}
    dict_list.append(new_dict)
print(dict_list[-1], dict_list[0])

for file_name in files:
    df = pd.read_csv(f'{folder_path}\\{file_name}')
    keys = list(df.columns)[1:]
    m_keys = []
    for key in keys:
        if key.isalpha() == False and key[-3:].isnumeric() == True:
            m_key = key[:-3]
        else:
            m_key = key
        m_keys.append(m_key)
    m_keys = tuple(m_keys)
    if m_keys not in EGroups_raw:
        EGroups_raw[m_keys] = []
    EGroups_raw[m_keys].append(file_name)
class BMS:
    def __init__(self, df):
        self.df = df
        cond_ls = np.array(self.df['timestamps'].to_list()) >= 5413.4487
        self.time = np.array(self.df['timestamps'].to_list())[cond_ls]-5413.4487
        self.keys = list(self.df.keys())
        self.data = {}
        for key in self.keys:
            if 'Pack' in key:
                key_l = key.split('Pack')
                if key_l[1] in ['Power', 'EnergyOut']:
                    self.data[key_l[1][0]] =np.array(self.df[key].to_list())[cond_ls]
                else:
                    if key_l[1][6] == 'V':
                        self.data['V'] = np.array(self.df[key].to_list())[cond_ls]
                    else:
                        self.data['I'] = np.array(self.df[key].to_list())[cond_ls]/2
        self.data['P_T'] = self.data['I']**2 *R #This is the I^2 * R
        self.data['E_T'] = cumtrapz(self.data['P_T'],self.time,initial=0) #Integration for the area under the curve power from I^2*R in respect to time
        self.temp = self.data['E_T']/(masses['cell']*1.4)+25 #This is the Delta T = Energy/(mass_of_cell * c)
    def update_end(self, volt, p, s, w=126):
        self.data['P_T_end'] = (self.data['I']*p)**2 *R*s/p
        self.data['E_T_end'] = cumtrapz(self.data['P_T_end'],self.time,initial=0)
        self.end_temp = self.data['E_T_end']/(w*1.4)+25
        self.temp_plot(self.end_temp, volt, w, p, s)
    def temp_plot(self, temp, volt, w, p=1, s=1):
        plt.plot(self.time,temp)
        plt.ylabel(f'T[C]')
        plt.xlabel(f't[s]')
        plt.title(f'{volt} Pack : (Parallel:{p}):(Series:{s}), Weight:{w}')
class Packs:
    def __init__(self, bms, row):
        self.current = abs(bms.data['I'])
        self.time = bms.time
        self.cell_v = float(row['Nominal Voltage (V)'])
        self.nom_v = float(row['Nom Pack V (V)'])
        self.max_v = float(row['Max V (V)'])
        self.pack_m = float(row['Pack Mass (kg)'])
        self.cell_m = float(row['Weight (g)'])
        self.series = int(row['Series Cells'])
        self.parallels = int(row['Parallel Cells'])
        self.total = int(row['Total Cells'])
        self.cell_capacity = float(row['Capacity (Ah)'])
        self.resist = float(row['Impedance (mOhm)']) * 10**-3
        self.volume = float(row['Volume (L)'])
        self.model = str(row['Model'])
        self.manufacturer = str(row['Manufacturer'])
        self.link = str(row['Link'])
        self.note = str(row['Notes'])
        self.max_cell_c_rate = int(row['Peak Discharge (<= 5sec)'])
        self.nom_cell_c_rate = int(row['Max Cont. Discharge Rate (C)'])
        
        self.pos_configs = {}
        self.scored_configs = []
        
    def optimize_config(self, capacity_range, cells_max, volt, volt_range, volume, mass, max_c_rate, volt_optimized=False):
        pos_s = []
        want_debug = False
        want_plot = False
        if self.note == 'current':
            curr_ratio = self.parallels/(self.series)
            current = abs(self.current*self.parallels)
            power = current**2 * self.resist / curr_ratio
            energy = cumtrapz(power,self.time,initial=0)
            temp = energy/(self.cell_m*self.total*1.4) +25
            capacity = self.total*self.cell_capacity*self.cell_v
            capacity_mean = sum(capacity_range)/len(capacity_range)
            nominal_pack_voltage = self.cell_v * self.series
            pack_resistance = self.resist * self.series / self.parallels / 1000
            AH = (-(3*self.series)+((3*self.series)**2-4*-80000*pack_resistance)**0.5)/(2*pack_resistance)
            AI = (-nominal_pack_voltage+(nominal_pack_voltage**2-4*-80000*pack_resistance)**0.5)/(2*pack_resistance)
            AJ=(-(4.2*self.series)+((4.2*self.series)**2-4*-80000*pack_resistance)**0.5)/(2*pack_resistance)
            ohmic_losses =AJ**2*pack_resistance
            max_pack_voltage =round((4.2*self.series)-pack_resistance*AJ,2)
            max_v_c_rate = AH/(self.parallels*self.cell_capacity)
            nom_v_c_rate = AI/(self.parallels*self.cell_capacity)
            capacity_ratio = 1- abs(capacity - (capacity_mean))/((capacity_mean-capacity_range[0])*2)
            
            self.current_dict = {
            'Layout':self.note+'|'+str(self.series)+'S*'+str(self.parallels)+'P',
            'Total':self.total,
            'Mass':self.pack_m,
            'Mass Ratio':(mass-self.pack_m)/mass*5,
            'CCV Max Pack Voltage':self.max_v,
            'OCV Nominal Pack Voltage':self.nom_v,
            'Nominal Pack Voltage Ratio':1 - abs(volt - self.nom_v)/volt,
            'Temp Diff':temp[-1]-temp[0],
            'Temp Diff Ratio':(10-(temp[-1]-temp[0]))/10,
            'Capacity':capacity,
            'Capacity Ratio': capacity_ratio,
            'Volume':self.volume*self.total,
            'Volume Ratio': 1 - abs(volume - self.volume*self.total)/volume,
            'Ohmic Losses':ohmic_losses,
            'Cell Max C Rate':self.max_cell_c_rate,
            'Cell Nominal C Rate':self.nom_cell_c_rate,
            'Max C Rate':max_v_c_rate,
            'Max C Rate Ratio':(max_v_c_rate - max_c_rate)/max_c_rate,
            'Nominal C Rate':nom_v_c_rate,
            'Temperature':temp,
            'Current':current,
            }
        
        if volt_optimized == True:
            self.n_nom_v = volt -50
            self.n_max_v = volt +50
            self.nom_ratio = self.nom_v/self.n_nom_v
            self.max_ratio = self.max_v/self.n_max_v
            for s in range(int(round(self.series/self.nom_ratio)), int(round(self.series/self.max_ratio))):
                pos_s.append(s)
        for s in range(int(round(cells_max*0.7)),cells_max+1):
            pos_s.append(s)
        for p in range(1,5):
            p_dict = {}
            for s in pos_s:
                total = p*s
                pack_mass = self.cell_m*total/1000
                curr_ratio = p/s
                current = abs(self.current*p) #pack change to cell
                power = current**2 * self.resist/curr_ratio
                energy = cumtrapz(power,self.time,initial=0)
                temp = energy/(self.cell_m*total*1.4) +25
                capacity = total*self.cell_capacity*self.cell_v
                capacity_mean = sum(capacity_range)/len(capacity_range)
                nominal_pack_voltage = self.cell_v * s
                pack_resistance = self.resist * s / p / 1000
                AH = (-(3*s)+((3*s)**2-4*-80000*pack_resistance)**0.5)/(2*pack_resistance)
                AI = (-nominal_pack_voltage+(nominal_pack_voltage**2-4*-80000*pack_resistance)**0.5)/(2*pack_resistance)
                AJ=(-(4.2*s)+((4.2*s)**2-4*-80000*pack_resistance)**0.5)/(2*pack_resistance)
                ohmic_losses =AJ**2*pack_resistance
                max_pack_voltage =round((4.2*s)-pack_resistance*AJ,2)
                max_v_c_rate = AH/(self.parallels*self.cell_capacity)
                nom_v_c_rate = AI/(p*self.cell_capacity)
                
                if int(round(self.cell_v*s)) not in range(volt_range[0],volt_range[1]+1):
                    continue
                if capacity <= capacity_range[1] and capacity >= capacity_range[0]:
                    capacity_ratio = 1 - abs(capacity - (capacity_mean))/((capacity_mean-capacity_range[0])*2)
                else:
                    continue
                p_dict[str(s)+'S*'+str(p)+'P'] = {
                'Layout':str(s)+'S*'+str(p)+'P',
                'Total':total,
                'Mass':pack_mass,
                'Mass Ratio':(mass-pack_mass)/mass*5,
                'CCV Max Pack Voltage':max_pack_voltage,
                'OCV Nominal Pack Voltage':nominal_pack_voltage,
                'Nominal Pack Voltage Ratio':1 - abs(volt - self.cell_v*s)/volt,
                'Temp Diff':temp[-1]-temp[0],
                'Temp Diff Ratio':(15-(temp[-1]-temp[0]))/15,
                'Capacity':capacity,
                'Capacity Ratio': capacity_ratio,
                'Volume':self.volume*total,
                'Volume Ratio': 1 - abs(volume - self.volume*total)/volume,
                'Ohmic Losses':ohmic_losses,
                'Cell Max C Rate':self.max_cell_c_rate,
                'Cell Nominal C Rate':self.nom_cell_c_rate,
                'Max C Rate':max_v_c_rate,
                'Max C Rate Ratio':(max_v_c_rate - max_c_rate)/max_c_rate*3,
                'Nominal C Rate':nom_v_c_rate,
                'Temperature':temp,
                'Current':current,
                }
            self.pos_configs[str(p)+'P'] = p_dict
        if want_debug == True:
            print(self.pos_configs)
        if want_plot == True:
            self.plot()
        self.score(find=True)
    def plot(self,layout='all'):
        for p in self.pos_configs:
            for lay, config_data in self.pos_configs[p].items():
                if layout != 'all':
                    plt.plot(self.time,config_data['Temperature'],label=lay)
                elif layout == lay:
                    plt.plot(self.time,config_data['Temperature'],label=lay)
            plt.ylabel('T[C]')
            plt.xlabel('t[s]')
            plt.title(f'Parallels:{p}')
            plt.legend()
            plt.grid(True)
            plt.show()
    def score(self, point_weight_dict=point_weight_dict1,find=False):
        if find == True:
            self.scored_point_weight = {}
            for point_weight_dict_new in dict_list:
                point_weight_str = ''
                for key, value in point_weight_dict_new.items():
                    point_weight_str+= f'{key[0:3]}:{value} '
                if self.note == 'current':
                    self.current_dict['Score'] = 0
                    for key in point_weight_dict_new:
                        self.current_dict[f'{key} Score'] = round(point_weight_dict_new[key]*self.current_dict[key]/5,2)
                        self.current_dict['Score'] += point_weight_dict_new[key]*self.current_dict[key]/5
                for p in self.pos_configs:
                    for config_data in self.pos_configs[p].values():
                        config_data['Score'] = 0
                        for key in point_weight_dict_new:
                            config_data[f'{key} Score'] = round(point_weight_dict_new[key]*config_data[key]/5,2)
                            config_data['Score'] += point_weight_dict_new[key]*config_data[key]/5
                    self.scored_configs.extend(self.pos_configs[p].values())
                self.scored_point_weight[point_weight_str] = sorted(self.scored_configs, key=lambda x: x['Score'],reverse=True)
        else:
            if self.note == 'current':
                self.current_dict['Score'] = 0
                for key in point_weight_dict:
                    self.current_dict[f'{key} Score'] = round(point_weight_dict[key]*self.current_dict[key]/5,2)
                    self.current_dict['Score'] += point_weight_dict[key]*self.current_dict[key]/5
            for p in self.pos_configs:
                for config_data in self.pos_configs[p].values():
                    config_data['Score'] = 0
                    for key in point_weight_dict:
                        config_data[f'{key} Score'] = round(point_weight_dict[key]*config_data[key]/5,2)
                        config_data['Score'] += point_weight_dict[key]*config_data[key]/5
                self.scored_configs.extend(self.pos_configs[p].values())
        self.scored_configs = sorted(self.scored_configs, key=lambda x: x['Score'],reverse=True)
    def list_scores(self,top_n='all'):
        if top_n != 'all':
            return(self.scored_configs[:top_n])
        else:
            return(self.scored_configs)
    def return_best(self):
        self.best = {'Manufacturer':self.manufacturer,
                     'Model':self.model,
                     'Link':self.link
                     }
        try:
            self.best.update(self.scored_configs[0])
        except:
            self.best.update({'Score':0})
        return(self.best)
    def return_current(self):
        if self.note == 'current':
            self.current_pack = {'Manufacturer':self.manufacturer,
                            'Model':self.model,
                            'Link':self.link
                            }
            self.current_pack.update(self.current_dict)
            return(self.current_pack)
    def return_best_point_weight(self):
        self.best_pw_list = []
        for point_weight_str, scored_list in self.scored_point_weight.items():
            self.best_point_weight = {'Manufacturer':self.manufacturer,
                         'Model':self.model,
                         'Link':self.link
                         }
            try:
                self.best_point_weight.update(scored_list[0])
                self.best_point_weight['Point Weight'] = point_weight_str
            except:
                self.best_point_weight.update({'Score':0})
                self.best_point_weight['Point Weight'] = point_weight_str
            self.best_pw_list.append(self.best_point_weight)
        self.best_pw_list = sorted(self.best_pw_list, key=lambda x: x['Score'],reverse=True)
        return(self.best_pw_list[0])

with open(r"C:\Users\cntur\Desktop\Codes\config.json") as config_file:
    config = json.load(config_file)
SPREADSHEET_ID = config['spreadsheet_id']
RANGE_NAME = config['range_name']
SCOPES = ['https://www.googleapis.com/auth/spreadsheets.readonly']
SERVICE_ACCOUNT_FILE = r'C:\Users\cntur\Desktop\Codes\service-account-file.json'

credentials = service_account.Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE, scopes=SCOPES)

# Create a service to interact with the Google Sheets API
service = build('sheets', 'v4', credentials=credentials)

# Call the Sheets API to get the data
sheet = service.spreadsheets()
result = sheet.values().get(spreadsheetId=SPREADSHEET_ID, range=RANGE_NAME).execute()
values = result.get('values', [])

# Check if any data was returned
configs = []
if not values:
    print('No data found.')
else:
    print('Data retrieved from Google Sheets:')
    headers = values[2][1:]
    values = values[3:]
    pr_values = []
    for row in values:
        pr_values.append(row[1:])
    for row in pr_values:
        config_dict = {}
        for header in headers:
            ind = headers.index(header)
            if (len(row)-1) >= ind:
                config_dict[header] = row[ind] 
            else:
                config_dict[header] = ''
        configs.append(config_dict)

BMS_list = []
file_paths = EGroups_raw[('BMS_PackPower', 'BMS_PackEnergyOut', 'BMS_PackClosedVoltage', 'BMS_PackCurrent')]

df_lengths = [len(pd.read_csv(f'{folder_path}\\{file_path}')) for file_path in file_paths]
for file_path in file_paths:
    df = pd.read_csv(f'{folder_path}\\{file_path}')
    df_len = len(df)
    if df_len == max(df_lengths):
        bms = BMS(df)
file_paths = EGroups_raw[('BMS_CellClosedVoltage', 'BMS_CellOpenVoltage', 'BMS_CellChargeResistance', 'BMS_CellDischargeResistance', 'BMS_CellTemperature')]
for file_path in file_paths:
    break
    df = pd.read_csv(f'{folder_path}\\{file_path}')
    print(df)
    print(file_path)
    df_time = np.array(df['timestamps'].to_list())
    if file_path == 'endurance.ChannelGroup_100__CGcomment__TX___TX__common_properties__e_name=_MessageID__ro=_true__833__e__e_name=_MessageDLC__ro=_true__8__e___common_properties___CGcomment_.csv':
        df_temp = np.array(df['BMS_CellTemperature013'].to_list())
    else:
        df_temp = np.array(df['BMS_CellTemperature014'].to_list())
    plt.plot(df_time,df_temp)
    plt.title('Cell Raw')
    plt.show()


packs = []
config_models = []
for config in configs:
    if config['Model'] not in config_models:
        try:
            packs.append(Packs(bms, config))
        except:
            continue
        config_models.append(config['Model'])

bests = []
point_weight_bests = []
for pack in packs:
    pack.optimize_config(capacity_range = (5200,6000), cells_max=144, volt = 600, volt_range = (500,600), volume = 12.6, mass = 29.1, max_c_rate = 16.6, volt_optimized=True)
    bests.append(pack.return_best())
    point_weight_bests.append(pack.return_best_point_weight())
    if pack.note == 'current':
        current_dict = pack.return_current()
bests = sorted(bests, key=lambda x: x['Score'],reverse=True)
excel_order = ['Bests']
excel_order.extend(pack['Model'] for pack in bests)
bests.append(current_dict)
#bests = sorted(bests, key=lambda x: x['Score'],reverse=True)
point_weight_bests = sorted(point_weight_bests, key=lambda x: x['Score'],reverse=True)
print(excel_order)
with pd.ExcelWriter(r'C:\Users\cntur\Desktop\Codes\point_output.xlsx') as writer:
    pd.DataFrame(point_weight_bests).to_excel(writer, sheet_name='Bests',index = False)
    for pack in packs:
        pd.DataFrame(pack.best_pw_list).to_excel(writer, sheet_name= pack.model,index = False)
workbook = load_workbook(r'C:\Users\cntur\Desktop\Codes\point_output.xlsx')
workbook._sheets = [workbook[sheet] for sheet in excel_order]
workbook.save(r'C:\Users\cntur\Desktop\Codes\point_output.xlsx')
print('Done')

with pd.ExcelWriter(r'C:\Users\cntur\Desktop\Codes\output.xlsx') as writer:
    pd.DataFrame(bests).to_excel(writer, sheet_name='Bests',index = False)
    for pack in packs:
        pd.DataFrame(pack.list_scores()).to_excel(writer, sheet_name= pack.model,index = False)
    print('Output file created')
    print('Best configuration:\n{}\n\nWith manufacturer {} and link {}'.format(bests[0],bests[0]['Manufacturer'],bests[0]['Link']))

workbook = load_workbook(r'C:\Users\cntur\Desktop\Codes\output.xlsx')
workbook._sheets = [workbook[sheet] for sheet in excel_order]
workbook.save(r'C:\Users\cntur\Desktop\Codes\output.xlsx')